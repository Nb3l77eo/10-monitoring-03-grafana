#!/usr/bin/env bash
set -eo pipefail
IFS=$'\n\t'

if ! [ -x "$(command -v docker)" ]; then
  echo 'Error: docker is not installed.' >&2
  exit 1
fi

if ! [ -x "$(command -v docker-compose)" ]; then
  echo 'Error: docker-compose is not installed.' >&2
  exit 1
fi

sandbox () {
  #     if [ "$2" == "-nightly" ]; then
  #       source .env-nightlies
  #       echo "Using nightlies...removing old ones."
  #       # If nightly images already exist, containers are stopped, destroyed,
  #       # and rebuilt using newly pulled images
  #       if [ $(docker images | grep nightly | tr -s ' ' | cut -d ' ' -f 3 | wc -l) -gt 0 ]; then
  #         docker-compose down
  #         docker-compose rm -f
  #         docker-compose build --pull
  #       fi
  #     else
  #       source .env-latest
  #       echo "Using latest, stable releases"
  #     fi
  # # Enter attaches users to a shell in the desired container
  enter () {
    case $2 in
      prometheus)
        echo "Entering /bin/bash session in the prometheus container..."
        docker-compose exec prometheus /bin/bash
        ;;
      grafana)
        echo "Entering /bin/sh session in the grafana container..."
        docker-compose exec grafana /bin/sh
        ;;
      exporter)
        echo "Entering /bin/bash session in the exporter container..."
        docker-compose exec exporter /bin/bash
        ;;
      # telegraf)
      #   echo "Entering /bin/bash session in the telegraf container..."
      #   docker-compose exec telegraf /bin/bash
      #   ;;
      *)
        echo "sandbox enter (prometheus||grafana||exporter)"
        ;;
    esac
  }

  # Logs streams the logs from the container to the shell
  logs () {
    case $2 in
      prometheus)
        echo "Following the logs from the prometheus container..."
        docker-compose logs -f prometheus
        ;;
      grafana)
        echo "Following the logs from the grafana container..."
        docker-compose logs -f grafana
        ;;
      exporter)
        echo "Following the logs from the exporter container..."
        docker-compose logs -f exporter
        ;;
      # telegraf)
      #   echo "Following the logs from the telegraf container..."
      #   docker-compose logs -f telegraf
      #   ;;
      *)
        echo "sandbox logs (prometheus||grafana||exporter)"
        ;;
    esac
  }

  case $1 in
    up)
      echo "Spinning up Docker Images..."
      echo "If this is your first time starting sandbox this might take a minute..."
      docker-compose up -d --build
      echo "Opening tabs in browser..."
      sleep 3
      if [ $(uname) == "Darwin" ]; then
        open http://localhost:3010
        open http://localhost:8888
      elif [ $(uname) == "Linux" ]; then
        xdg-open http://localhost:8888
        xdg-open http://localhost:3010
      else
        echo "no browser detected..."
      fi
      ;;
    down)
      echo "Stopping sandbox containers..."
      docker-compose down
      ;;
    restart)
      echo "Stopping all sandbox processes..."
      docker-compose down > /dev/null 2>&1
      echo "Starting all sandbox processes..."
      docker-compose up -d --build > /dev/null 2>&1
      echo "Services available!"
      ;;
    # delete-data)
    #   echo "deleting all influxdb, kapacitor and chronograf data..."
    #   rm -rf kapacitor/data influxdb/data chronograf/data
    #   ;;
    docker-clean)
      echo "Stopping and removing running sandbox containers..."
      docker-compose down
      echo "Removing images..."
      docker rmi prom/prometheus:latest prom/node-exporter:latest grafana/grafana:latest > /dev/null 2>&1
      docker rmi $(docker images -f "dangling=true" -q)
      ;;
    # influxdb)
    #   echo "Entering the influx cli..."
    #   docker-compose exec influxdb /usr/bin/influx
    #   ;;
    # flux)
    #   echo "Entering the flux repl..."
    #   docker-compose exec influxdb /usr/bin/influx -type flux
    #   ;;
    # rebuild-docs)
    #   echo "Rebuilding documentation container..."
    #   docker build -t sandbox_documentation documentation/ > /dev/null 2>&1
    #   echo "Restarting..."
    #   docker-compose down > /dev/null 2>&1
    #   docker-compose up -d --build > /dev/null 2>&1
    #   ;;
    enter)
      enter $@
      ;;
    logs)
      logs $@
      ;;
    *)
      cat <<-EOF
sandbox commands:
  up (-nightly)      -> spin up the sandbox environment (latest or nightlies specified in the companion file)
  down               -> tear down the sandbox environment (latest or nightlies specified in the companion file)
  restart (-nightly) -> restart the sandbox

  enter (prometheus||grafana||exporter) -> enter the specified container
  logs  (prometheus||grafana||exporter) -> stream logs for the specified container

  docker-clean -> stop and remove all running docker containers and images
EOF
      ;;
  esac
}

pushd `dirname $0` > /dev/null
    sandbox $@
popd > /dev/null

